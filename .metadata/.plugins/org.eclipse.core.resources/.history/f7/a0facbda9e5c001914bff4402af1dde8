package src;

import java.io.IOException;
import java.util.Collections;
import java.util.Set;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import org.junit.Before;
import org.junit.Test;

public class GameTest {
	private GameCourt model;
	private JLabel status;
	private Player pl;
	private FileReader read;
	private BufferedReader reader;
	private FileReader read2;
	private BufferedReader reader2;
	
	@Before
	public void setUp() {
		status = new JLabel("Running...");
		model = new GameCourt(status);
		pl = model.getPlayer();
	}
	/**
	 * The first few test cases are testing if the game states are updated
	 * correctly in response to many different things that happen in the game as
	 * the user gives keyboard inputs. I'm modeling the game state where I check
	 * if the methods that are called in response to keyboard input are doing
	 * their jobs. For instance, pressing UP key for a cloud should increment
	 * the player's heart count to be +1. For the second half, I'm checking the
	 * methods for the I/O where I'm testing proper reading/writing high scores.
	 */

	@Test
	public void testMissedKey() {
		assertEquals("heart count begins with 10", 10, pl.getHeartCount());
		model.playerMissedKey();
		assertEquals("heart should be decremented to 9", 9, pl.getHeartCount());
		assertEquals("Score stays 0", 0, pl.getScore());
	}

	@Test
	public void testCorrectKey() {
		assertEquals("Score is 0 in the beginning", 0, pl.getScore());
		model.playerScored();
		assertEquals("Heartcount stays the same 10", 10, pl.getHeartCount());
		assertEquals("Score is incremented to 1", 1, pl.getScore());
	}

	@Test
	public void testCloudWhichIncrementsLife() {
		assertEquals("Heart count starts from 10", 10, pl.getHeartCount());
		model.playerMissedKey();
		assertEquals("Now, heartCount equals 9", 9, pl.getHeartCount());
		model.cloud.effects(model);
		assertEquals("HeartCount increments to 10", 10, pl.getHeartCount());
	}

	@Test
	public void testHeartCountShouldNOTExceed10() {
		assertEquals("Heart count starts from 10", 10, pl.getHeartCount());
		model.cloud.effects(model);

	}

	@Test
	public void testBombWhichDecrementsLife() {
		assertEquals("HeartCount starts from 10", 10, pl.getHeartCount());
		model.bomb.effects(model);
		assertEquals("HeartCount decrements to 9", 9, pl.getHeartCount());
		assertEquals("Score stays zero", 0, pl.getScore());
	}

	@Test
	public void testTreeEffects() {
		model.tree.effects(model);
		assertEquals("Knocking off tree doesn't affect any game state", 
				10, pl.getHeartCount());
		assertEquals("Knocking off tree doesn't affect any game state", 
				0, pl.getScore());
	}

	@Test
	public void testMountEffects() {
		model.mount.effects(model);
		assertEquals("Knocking off mount doesn't affect any game state",
				10, pl.getHeartCount());
		assertEquals("Knocking off mount doesn't affect any game state",
				0, pl.getScore());
	}

	@Test
	public void testResetMethod() {
		model.playerScored();
		model.playerScored();
		assertEquals("score is 2 now", 2, pl.getScore());
		model.reset();
		assertEquals("score is set to 0", 0, pl.getScore());
	}

	@Test
	public void testReadImproperlyFormattedReadInput() {
		pl.setScore(12);
		model.saveUserName("Harry", "HighScores.txt");
		model.readScores("ImproperFormat.txt");
		// then HighScore.txt should be empty even if the user saved their input
		try {
			// because of improper formatting, HighScore.txt should be empty
			read = new FileReader("Empty.txt");
			reader = new BufferedReader(read);
			String line = reader.readLine();
			line = line.trim();
			assertEquals("Expected HighScore.txt content is empty",
					line, "");
			System.out.println("File was not found!");
		} catch (IOException e) {
			System.out.println("Could not load the file correctly!");
		} finally {
			try {
				reader.close();
			} catch (IOException e) {
			}

		}
	}

	@Test
	public void testSaveUserName() {
		// Hypothetical situation where player scored 5 points and Game ended
		pl.setScore(5);
		model.playing = false;
		try {
			// Expected.txt has one line of content which is "Jenn: 5"
			read = new FileReader("Expected.txt");
			reader = new BufferedReader(read);
			String line = reader.readLine();
			line = line.trim();
			String[] parts = line.split(":");
			model.saveUserName("Jenn", "Blank.txt");

			// Blank.txt is a blank.txt file on which I'll test my
			// saveUserName method. It should correctly save the user's name
			// and their current score and write them out to the blank.txt.
			// in the right format ("name:score")
			read2 = new FileReader("Blank.txt");
			reader2 = new BufferedReader(read2);
			String line2 = reader2.readLine();
			line2 = line2.trim();
			String[] parts2 = line.split(":");

			assertEquals("Expected name saved = Jenn", parts[0], parts2[0]);
			assertEquals("Expected score saved = 5", parts[1], parts2[1]);
		} catch (FileNotFoundException e) {
			System.out.println("File was not found!");
		} catch (IOException e) {
			System.out.println("Could not load the file correctly!");
		} finally {
			try {
				reader.close();
				reader2.close();
			} catch (IOException e) {
			}

		}
	}

}
